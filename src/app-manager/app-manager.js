/**
 * App Manager Module
 * Main JavaScript file for the app manager module
 * 
 * This file initializes the app manager module and sets up the event handlers.
 * It is responsible for loading, displaying, and managing the web components
 * generated by the App Creator.
 */

// Import components
import { LahatApp } from './components/lahat-app.js';
import { LahatCell } from './components/lahat-cell.js';
import { WidgetDrawer } from './components/widget-drawer/widget-drawer.js';
import { ErrorContainer, ErrorMessage } from './components/ui/error-container.js';

// Import utilities
import { EventBus } from './utils/event-bus.js';
import { ErrorLevel, showError } from './utils/error-utils.js';
import { dispatchCustomEvent } from './utils/event-utils.js';

// Create a module-specific event bus
const eventBus = new EventBus();

/**
 * Initialize the app manager module
 */
function initializeAppManager() {
  console.log('Initializing app manager module...');
  
  try {
    // Register custom elements if not already registered
    if (!customElements.get('error-container')) {
      customElements.define('error-container', ErrorContainer);
    }
    
    if (!customElements.get('error-message')) {
      customElements.define('error-message', ErrorMessage);
    }
    
    // Create error container if it doesn't exist
    if (!document.querySelector('error-container')) {
      const errorContainer = document.createElement('error-container');
      document.body.appendChild(errorContainer);
    }
    
    // Initialize the LahatApp
    const lahatAppContainer = document.getElementById('lahat-app-container');
    if (lahatAppContainer) {
      const lahatApp = document.createElement('lahat-app');
      lahatAppContainer.appendChild(lahatApp);
      
      // Set up event listeners
      lahatApp.addEventListener('widget-drawer-requested', () => {
        toggleWidgetDrawer(true);
      });
      
      lahatApp.addEventListener('app-event', (event) => {
        console.log('App event:', event.detail);
      });
      
      lahatApp.addEventListener('settings-requested', (event) => {
        console.log('Settings requested:', event.detail);
      });
    }
    
    // Initialize the WidgetDrawer
    const widgetDrawerContainer = document.getElementById('widget-drawer-container');
    if (widgetDrawerContainer) {
      const widgetDrawer = document.createElement('widget-drawer');
      widgetDrawerContainer.appendChild(widgetDrawer);
      
      // Set up event listeners
      widgetDrawer.addEventListener('widget-selected', (event) => {
        const { componentName, widget } = event.detail;
        addWidgetToApp(componentName, widget);
      });
      
      widgetDrawer.addEventListener('create-widget-requested', () => {
        createNewWidget();
      });
      
      widgetDrawer.addEventListener('widget-drawer-closed', () => {
        toggleWidgetDrawer(false);
      });
      
      // Initially hide the widget drawer
      toggleWidgetDrawer(false);
    }
    
    console.log('App manager module initialized');
  } catch (error) {
    console.error('Failed to initialize app manager module:', error);
    
    // Show error in the UI
    showError('Initialization Error', error.message, ErrorLevel.FATAL);
  }
}

/**
 * Toggle the widget drawer
 * @param {boolean} show - Whether to show the drawer
 */
function toggleWidgetDrawer(show) {
  const widgetDrawerContainer = document.getElementById('widget-drawer-container');
  if (widgetDrawerContainer) {
    if (show) {
      widgetDrawerContainer.classList.remove('collapsed');
    } else {
      widgetDrawerContainer.classList.add('collapsed');
    }
  }
}

/**
 * Add a widget to the app
 * @param {string} componentName - The component name
 * @param {Object} widget - The widget data
 */
function addWidgetToApp(componentName, widget) {
  const lahatApp = document.querySelector('lahat-app');
  if (lahatApp) {
    const cell = lahatApp.createCell(componentName, widget.componentName || widget.name);
    console.log(`Added widget ${componentName} to app`);
  }
}

/**
 * Create a new widget
 */
function createNewWidget() {
  // Use the IPC renderer to request the creation of a new widget
  import('./ipc/renderer-handlers.js').then(({ createNewWidget }) => {
    createNewWidget();
  });
}

// Initialize the module when the DOM is loaded
document.addEventListener('DOMContentLoaded', initializeAppManager);

// Export the event bus for use by other components
export { eventBus };
